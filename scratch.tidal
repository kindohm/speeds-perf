

let
  lfospeed pat = ccv pat # ccn 102
  lfomult pat = ccv pat # ccn 103
  lfofade pat = ccv pat # ccn 104
  lfodest pat = ccv pat # ccn 105
  lfowave pat = ccv pat # ccn 106
  lfodepth pat = ccv pat # ccn 109
  cfg pat = ccv pat # ccn 21
  tune pat = ccv pat # ccn 17
  balance pat = ccv pat # ccn 19
  detune pat = ccv pat # ccn 20
  ccrand min max x = (segment 1 $ range min max $ shrand x)
  hold pat = ccv pat # ccn 79
  decay pat = ccv pat # ccn 80
  rvbsend pat = ccv pat # ccn 83
  delaysend pat = ccv pat # ccn 82
  size pat = ccv pat # ccn 25
  env pat = ccv pat # ccn 77
  atk pat = ccv pat # ccn 70
  dec pat= ccv pat # ccn 71
  deltime pat = ccv pat # ccn 16
  lfochoices = [10,12,14,25,28,30,37]
  cutoff pat = ccv pat # ccn 74
  

p "bass"
  $ limit 
  $ slow 2 
  $ stack [
    stack [ 
      (|+ note "<-24 -12>") 
        $ dg5
        $ gain "1(3,8, <10 30 40>)" 
          # note (scale "ritusen" "<0 1 -1 2 -2 3 -3>") # legato (range 0.25 0.5 $ shrand 389211)
      , lfospeed (ccrand 0 100 100)
      , lfomult (ccrand 0 6 101)
      , lfodepth (ccrand 0 127 102)
      , lfodest (segment 1 $ shiftBy 38111 $ choose lfochoices)
      -- , ccn 105 # ccv 2
      , lfowave (ccrand 0 6 103)
      , lfofade (ccrand 40 90 104)
      , cfg (ccrand 0 78 105)
      , tune (ccrand 20 64 119)
      , balance (ccrand 0 127 106)
      , detune (ccrand 0 127 107)
      , rvbsend (ccrand 0 127 108)
      , delaysend (ccrand 0 127 109)
      , env (ccrand 0 127 110)
      , atk (ccrand 0 127 111)
      , dec (ccrand 0 127 112)
      , decay (ccrand 1 120 211)
      , cutoff (ccrand 20 100 118)
    ] # midichan 0 # s "rytm"
    , stack [
      size (ccrand 0 100 201)
      , deltime (ccrand 0 127 200)
    ] # midichan 12 # s "rytm"
    , g $ stack [
      ccn 1 # ccv (range 0 120 $ shrand 777)
      , ccn 2 # ccv (range 0 120 $ shrand 771)
      , ccn 3 # ccv (range 0 127 $ shrand 772)
      , ccn 4 # ccv (shiftBy 33 $ choose [0,127])
    ] # s "harmor" # midichan 0
  ]
  # cps (160/120/2)

d1 $ fast 4 $ s "harmor" # midichan 0 # ccn 4 # ccv (range 0 127 $ shrand 83711)

  hush

p "drums" 
  $ limit 
  $ every 3 rev
  $ stack [ 
    dg5 $ slow 2 $ struct "{1@5 1@3 1@10 1@8 1@20}%16" $ midichan 4 # note "c3" # legato (range 0.75 1 $ shrand 1771)
    , struct "{1@5 1@3 1@10 1@8 1@20}%16" $ midichan 2 # note "c3" 
    , g $ midichan "3" # note "c3" 
  ] # s "rytm"

  hush


  d1 $ fast (choose [2,3..10]) $ s "pad" # n 2 # note (scale "ritusen" "<0 -1 -2 -3>") # begin (range 0.1 0.4 $ slow 33 rand) # cut 1



let 
    first = stack [ ccn 1 # ccv 102, ccn 2 # ccv 0, ccn 3 # ccv 0, ccn 4 # ccv 0, ccn 5 # ccv 0, ccn 6 # ccv 0, ccn 7 # ccv 0, ccn 8 # ccv 0, ccn 9 # ccv 0 ] # s "harmor" # midichan 0
    second = stack [ ccn 1 # ccv 0, ccn 2 # ccv 102, ccn 3 # ccv 0, ccn 4 # ccv 0, ccn 5 # ccv 0, ccn 6 # ccv 0, ccn 7 # ccv 0, ccn 8 # ccv 0, ccn 9 # ccv 0 ] # s "harmor" # midichan 0
    third = stack [ ccn 1 # ccv 0, ccn 2 # ccv 0, ccn 3 # ccv 102, ccn 4 # ccv 0, ccn 5 # ccv 0, ccn 6 # ccv 0, ccn 7 # ccv 0, ccn 8 # ccv 0, ccn 9 # ccv 0 ] # s "harmor" # midichan 0
    fourth = stack [ ccn 1 # ccv 0, ccn 2 # ccv 0, ccn 3 # ccv 0, ccn 4 # ccv 102, ccn 5 # ccv 0, ccn 6 # ccv 0, ccn 7 # ccv 0, ccn 8 # ccv 0, ccn 9 # ccv 0 ] # s "harmor" # midichan 0
    fifth = stack [ ccn 1 # ccv 0, ccn 2 # ccv 0, ccn 3 # ccv 0, ccn 4 # ccv 0, ccn 5 # ccv 102, ccn 6 # ccv 0, ccn 7 # ccv 0, ccn 8 # ccv 0, ccn 9 # ccv 0 ] # s "harmor" # midichan 0
    sixth = stack [ ccn 1 # ccv 9, ccn 2 # ccv 0, ccn 3 # ccv 0, ccn 4 # ccv 0, ccn 5 # ccv 0, ccn 6 # ccv 102, ccn 7 # ccv 0, ccn 8 # ccv 0, ccn 9 # ccv 0 ] # s "harmor" # midichan 0
    seventh = stack [ ccn 1 # ccv 0, ccn 2 # ccv 0, ccn 3 # ccv 0, ccn 4 # ccv 0, ccn 5 # ccv 0, ccn 6 # ccv 0, ccn 7 # ccv 102, ccn 8 # ccv 0, ccn 9 # ccv 0 ] # s "harmor" # midichan 0
    eighth = stack [ ccn 1 # ccv 0, ccn 2 # ccv 0, ccn 3 # ccv 0, ccn 4 # ccv 0, ccn 5 # ccv 0, ccn 6 # ccv 0, ccn 7 # ccv 0, ccn 8 # ccv 102, ccn 9 # ccv 0 ] # s "harmor" # midichan 0
    ninth = stack [ ccn 1 # ccv 0, ccn 2 # ccv 0, ccn 3 # ccv 0, ccn 4 # ccv 0, ccn 5 # ccv 0, ccn 6 # ccv 0, ccn 7 # ccv 0, ccn 8 # ccv 0, ccn 9 # ccv 102 ] # s "harmor" # midichan 0
    getit = slow (shiftBy 38 $ choose [0.5,0.6..1.5]) $ randcat [first, second, third, fourth, fifth, sixth, seventh, eighth, ninth]
    verb1 = stack [ ccn 1 # ccv 85, ccn 2 # ccv 0 ] # s "harmor" # midichan 2
    verb2 = stack [ ccn 1 # ccv 0, ccn 2 # ccv 102 ] # s "harmor" # midichan 2
    getitverb = slow (shiftBy 3811 $ choose [0.5,0.6..2]) $ randcat [verb1, verb2]

do
  d1  
    $ whenmod 32 24 (slow 1.5)
    $ whenmod 24 16 (slow 1.5)
    $ dg0
    $ shift
    $ limit
    $ every 3 rev
    $ stack [
      dg5 $ shiftBy 333 $ one 0.25 $ shiftBy 389 $ gain "{1@3 1@5 1@7 1@9 1@11 1@13 1@15}%16" # midichan 2 # note "c3"
      , dg5 $ shiftBy 1001 $ roll 0.3 $ shiftBy 4 $ dg3 $ midichan 3 # note "c3"
      , dg5 $ shiftBy 9 $ struct (binaryN 16 "<23721 7238711 432054>") $ midichan 10 # note "c3"
      , dg0 $ foldEvery [2,3] (slow 1.5) $ midichan 4 # note "c3" # legato 0.2
    ] # rytm # cps (140/120/2)

  d2 
    $ stack [getit, getitverb ]


d2 $ fast 5 $ ccn 1 # ccv (range 0 127 $ shrand 83) # s "harmor" # midichan 2

  
  
  
  
  
  
  
  hush


  0.800003051757813










let target =
      Target {oName = "visualiser",   -- A friendly name for the target (only used in error messages)
              oAddress = "localhost", -- The target's network address, normally "localhost"
              oPort = 5050,           -- The network port the target is listening on
              oLatency = 0.2,         -- Additional delay, to smooth out network jitter/get things in sync
              oSchedule = Live,       -- The scheduling method - see below
              oWindow = Nothing       -- Not yet used
             }

let oscplay = OSC "/play" $ ArgList [("s", Nothing),
                                     ("vowel", Just $ VS "a"),
                                     ("pan", Just $ VF 0.5),
                                     ("cut", Just $ VI 1),
                                     ("intensity", Just $ VI 0),
                                     ("sec", Just $ VF 0),
                                     ("usec", Just $ VF 0),
                                     ("cps", Just $ VF 0),
                                     ("cycle", Just $ VF 0),
                                     ("delta", Just $ VF 0)
                                   ]

let oscmap = [(target, [oscplay]),
              (superdirtTarget, [superdirtShape])
             ]

stream <- startStream defaultConfig oscmap

d = streamReplace stream

d 1 $ s "bd"             


d1 $ s "herb1" # cut 1 # speed (range 0.5 1 $ slow 3 rand)


d1 $ s "bd(<5 7>,16,<0 10 7>)" # speed (sew "t(3,8)" 1 2)


hush

d1 
  $ (|* cps (range 0.25 1.5 $ slow 5.1 tri))
  $ (|* cps (segment 1 $ range 0.5 2 $ slow 333 rand))
  $ stutWith (sew "t(<3 7>,16,<30 41 88>)" 8 16) 
    (segment ((4 ~>) $ choose [4,8,2,1]) $ (44 ~>) 
    $ choose [0.125, 0.0625, 0.0625/2, 0.0625/4]) (|* gain 0.95)
  $ iter (sew "t(<2 1 3>,16,<1 11 21 33>)" 1 8)
  $ stitch
    "t(<3 2 5 3 7>,16,<0 5 11 23>)" 
    (off (0.0625*3) id $ gain "1(<3 4 7>,16,<2 7 17 11>)" 
      # n (every 2 rev $ run 10) 
      # s "[ifdrums peri]*3" 
      # speed (sew "t(3,8)" 1 0.5)) 
    (every 2 rev $ striate' 256 (1/100) $ s "bev" 
      # speed "[<1 1.5 1.25>,<0.5 0.75>]") # cps 0.4
    # delayt 0.1
    # delayfb 0.8
    # delay 0.8

    hush

d1 $ stitch "t(3,8)" (s "bd*4") (s "cp*4")

d1 $ sew "t(3,8)" (s "bd*4") (s "cp*4")

hush



d1 
  $ stack [
    s (sew "t(<5 7 9>,16,<0 14 23 31 27>)" "[drum jvbass]*8" "[ifdrums future]*8") 
    # n (every 3 rev $ "0 .. 15")  
    # delaytime (segment "<1 3 2 4>" $ range 0.0001 0.05 $ slow 33 rand)
    # delay 0.5
    # delayfb (segment "<1 5 4 2 3>" $ range 0.5 0.9 $ slow 44 rand)
    , gain "1(<14 9 11>,16,<1 7 2>)" 
      # s "bev" # begin 0.6 # legato 2 # speed "[1,1.5,2]"
      # shape 0 # hpf 800
  ]
  # orbit "<0 2 1>" # cps 0.7

hush



do 
  d1 
    $ (|* gain 1.2)
    $ fast 2 
    $ linger (segment 1 $ choose [(1/10), (2/10)..1])
    $ stack [
      speed "1 1.2 1.5 2 1.7 2.5 2.5 2.25 1.25 1.5" # s "bev" # begin 0.6 # legato 1 # gain 1
      , s "bd" # shape 0.3
      , s "hh*10"
      , (0.5 ~>) $ s "cp"
    ]

hush




do 
  let vals = [(1/16),(2/16),(3/16),(4/16),(5/16),(6/16),(7/16),(8/16),(9/16),(10/16),(11/16),(12/16),(13/16),(14/16),(15/16),1]
      steppat num = (select (cF 1 num) vals )
      step1 = steppat "96"
      step2 = steppat "98"
      step3 = steppat "100"
      step4 = steppat "70"
      step5 = steppat "72"
      step6 = steppat "74"
      step7 = steppat "76"
      step8 = steppat "78"
      step9 = steppat "80"
      step10 = steppat "82"
      step11 = steppat "84"
      step12 = steppat "86"
      step13 = steppat "88"
      step14 = steppat "90"
      step15 = steppat "92"
      step16 = steppat "94"
      mapspeed step = (range 0.5 2 $ step)
  d1 
    $ linger (slowcat [step1, step2, step3, step4, step5, step6, step7, step8, step9, step10, step11, step12, step13, step14, step15, step16])
    $ stack [
      speed (fastcat [mapspeed step1, mapspeed step2, mapspeed step3, mapspeed step4, mapspeed step5, mapspeed step6, mapspeed step7, mapspeed step8, mapspeed step9, mapspeed step10, mapspeed step11, mapspeed step12, mapspeed step13, mapspeed step14, mapspeed step15, mapspeed step16]) # s "arpy" # gain 0.9
      , s "bd cp" 
    ] # cps 1 

hush


do
  let nn num = speed (segment 1 $ range 0.5 1.5 $ (cF 1 num)) # s "[speeds8stab:5]" # begin 0
      step1 = nn "96"
      step2 = nn "98"
      step3 = nn "100"
      step4 = nn "70"
      step5 = nn "72"
      step6 = nn "74"
      step7 = nn "76"
      step8 = nn "78"
      step9 = nn "80"
      step10 = nn "82"
      step11 = nn "84"
      step12 = nn "86"
      step13 = nn "88"
      step14 = nn "90"
      step15 = nn "92"
      step16 = nn "94"
      real1 = stack [step1, s "kit5" # shape 0.4]
      pat1 = fast 16 $ fastcat [ real1 ]
      pat2 = fast (16/2) $ fastcat [ real1, step2 ]
      pat3 = fast (16/3) $ fastcat [ real1, step2, step3 ]
      pat4 = fast (16/4) $ fastcat [ real1, step2, step3, step4 ]
      pat5 = fast (16/5) $ fastcat [ real1, step2, step3, step4, step5 ]
      pat6 = fast (16/6) $ fastcat [ real1, step2, step3, step4, step5, step6 ]
      pat7 = fast (16/7) $ fastcat [ real1, step2, step3 ,step4, step5, step6, step7 ]
      real9 = stack [ step9, s "kit5" # n 1 # shape 0.3]
      pat8 = fast (16/8) $ fastcat [ real1, step2, step3, step4, step5, step6, step7, step8 ]
      pat9 = fast (16/9) $ fastcat [ real1, step2, step3, step4, step5, step6, step7, step8, real9 ]
      pat10 = fast (16/10) $ fastcat [ real1, step2, step3, step4, step5, step6, step7, step8, real9, step10 ]
      pat11 = fast (16/11) $ fastcat [ real1, step2, step3, step4, step5, step6, step7, step8, real9, step10, step11 ]
      pat12 = fast (16/12) $ fastcat [ real1, step2, step3, step4, step5, step6, step7, step8, real9, step10, step11, step12 ]
      pat13 = fast (16/13) $ fastcat [ real1, step2, step3, step4, step5, step6, step7, step8, real9, step10, step11, step12, step13 ]
      pat14 = fast (16/14) $ fastcat [ real1, step2, step3, step4, step5, step6, step7, step8, real9, step10, step11, step12, step13, step14 ]
      pat15 = fast (16/15) $ fastcat [ real1, step2, step3, step4, step5, step6, step7, step8, real9, step10, step11, step12, step13, step14, step15 ]
      pat16 = fast 1 $ fastcat [ real1, step2, step3, step4, step5, step6, step7, step8, real9, step10, step11, step12, step13, step14, step15, step16 ]
      patselect num = (select (cF 1 num) [pat1, pat2, pat3, pat4, pat5, pat6, pat7, pat8, pat9, pat10, pat11, pat12, pat13, pat14, pat15, pat16]) 
      patselect1 = patselect "96"
      patselect2 = patselect "98"
      patselect3 = patselect "100"
      patselect4 = patselect "70"
      patselect5 = patselect "72"
      patselect6 = patselect "74"
      patselect7 = patselect "76"
      patselect8 = patselect "78"
      patselect9 = patselect "80"
      patselect10 = patselect "82"
      patselect11 = patselect "84"
      patselect12 = patselect "86"
      patselect13 = patselect "88"
      patselect14 = patselect "90"
      patselect15 = patselect "92"
      patselect16 = patselect "94"
  d1 
    $ stack [
        slow 16 $ fastcat [
          patselect1        
          , patselect2
          , patselect3
          , patselect4
          , patselect5
          , patselect6
          , patselect7
          , patselect8
          , patselect9
          , patselect10
          , patselect11
          , patselect12
          , patselect13
          , patselect14
          , patselect15
          , patselect16
        ]
    ]  # cps 0.5 # legato 1
    
    
hush

    # cps (slowcat [ 
      (range 0.25 2 $ (cF 1 "96")),
      (range 0.25 2 $ (cF 1 "98")),
      (range 0.25 2 $ (cF 1 "100")),
      (range 0.25 2 $ (cF 1 "70")),
      (range 0.25 2 $ (cF 1 "72")),
      (range 0.25 2 $ (cF 1 "74")),
      (range 0.25 2 $ (cF 1 "76")),
      (range 0.25 2 $ (cF 1 "78")),
      (range 0.25 2 $ (cF 1 "80")),
      (range 0.25 2 $ (cF 1 "82")),
      (range 0.25 2 $ (cF 1 "84")),
      (range 0.25 2 $ (cF 1 "86")),
      (range 0.25 2 $ (cF 1 "88")),
      (range 0.25 2 $ (cF 1 "90")),
      (range 0.25 2 $ (cF 1 "92")),
      (range 0.25 2 $ (cF 1 "94"))
    ])



hush

  hush



do
  let pat = "t(<3 5 2>,16,<0 5 10 15>)"
  d1
    $ (|* gain 1.2)
    $ while "{t f f}%4" rev
    $ every "<2 3 3 2 3>" (within (0, 0.25) (const $ stack [
      midichan 3 # s "rytm" # note "c3"
      , s "harmor" # midichan 0 # gain 0.4 # note "c5"
    ]))
    $ stack [
      struct pat $ midichan 2 # s "rytm" # note "c3"
      , (0.0625 ~>) $ struct (pat) $ midichan 10 # s "rytm" # note "c3"
      , struct pat $ s "rytm" # midichan 0 # note "c3"
      , g $ struct pat $ s "harmor" # midichan 0 # note "c5" # legato 5
      , g $ slow "<3 4 2>" $ s "harmor" # ccn 1 # ccv (range 33 100 $ slow 23 rand) # midichan 0      
      , g $ slow "<3 4 2>" $ s "harmor" # ccn 2 # ccv (range 33 100 $ slow 63 rand) # midichan 0      
      , g $ slow "<3 4 2>" $ s "harmor" # ccn 3 # ccv (range 33 100 $ slow 93 rand) # midichan 0      
    ] # cps (160/120/2)


d1 $fast 4 $ s "harmor" # ccn 3 # ccv (range 0 127 $ slow 3 rand) # midichan 0

    hush