let 
  limit p = (|* gain 1.15) $ p
  g p = (const $ s "~") $ p
  shift = (1 ~>)
  shiftBy n = (n ~>)
  shiftby = shiftBy
  shrand x = (shiftBy x $ rand)
  cps200 = cps (200/120/2)
  reduce = degradeBy (cF 0 "96")
  reduce2 = degradeBy (cF 0 "72")
  padOn = every ( range 1 0 $  (cI 0 "77") ) g
  harmorOn = every ( range 1 0 $  (cI 0 "101") ) g
  kickOn = every ( range 1 0 $  (cI 0 "71") ) g
  perc1On = every ( range 1 0 $  (cI 0 "79") ) g
  perc2On = every ( range 1 0 $  (cI 0 "87") ) g
  clapOn = every ( range 1 0 $  (cI 0 "95") ) g
  hatOn = every ( range 1 0 $  (cI 0 "93") ) g  
  useIter f = every ( range 0 1 $  (cI 0 "89") ) f  
  minTempo = (range 1 0.333 $ (cF 0 "88"))
  maxTempo = (range 1 1.5 $ (cF 0 "88"))
  sceneRange = (range 0 3 $ (cF 0 "90"))
  rytm = s "rytm"
  harmor = s "harmor"
  speed001chan = midichan 0
  speed002chan = midichan 1
  speed004chan = midichan 3
  speed005chan = midichan 4
  speed006chan = midichan 5
  speed007chan = midichan 6
  speed008chan = midichan 7
  rebChan = midichan 8
  cantChan = midichan 9
  std p = limit $ (# cps200) $ p
  stdnote = note "c3"
  pad1 = midichan 0 # rytm
  pad2 = midichan 1 # rytm
  pad3 = midichan 2 # rytm
  pad4 = midichan 3 # rytm
  pad5 = midichan 4 # rytm
  pad6 = midichan 5 # rytm
  pad7 = midichan 6 # rytm
  pad8 = midichan 7 # rytm
  pad11 = midichan 10 # rytm
  pad1n = pad1 # stdnote
  pad2n = pad2 # stdnote
  pad3n = pad3 # stdnote
  pad5n = pad5 # stdnote
  pad6n = pad6 # stdnote
  pad7n = pad7 # stdnote
  pad8n = pad8 # stdnote
  pad4n = pad4 # stdnote
  pad11n = pad11 # stdnote
  ghost f p = off 0.0625 f $ p
  ghostp prob f p = sb prob (ghost f) $ shiftBy 101 $ p
  one prob p = sb prob (off 0.0625 id) $ shiftBy 100 $ p
  roll prob p = sb prob (off "3e" id) $ shiftBy 102 $ p
  sb = sometimesBy
  ssb = someCyclesBy
  dg0 = id
  dg1 = degradeBy 0.1
  dg2 = degradeBy 0.2
  dg3 = degradeBy 0.3 
  dg4 = degradeBy 0.4
  dg5 = degradeBy 0.5
  dg6 = degradeBy 0.6
  dg7 = degradeBy 0.7
  dg8 = degradeBy 0.8
  dg9 = degradeBy 0.9
  perf1 pat = ccv pat # ccn 35 # rytm
  perf2 pat = ccv pat # ccn 36 # rytm
  perf3 pat = ccv pat # ccn 37 # rytm
  perf4 pat = ccv pat # ccn 39 # rytm
  perf5 pat = ccv pat # ccn 40 # rytm
  perf6 pat = ccv pat # ccn 41 # rytm
  perf7 pat = ccv pat # ccn 42 # rytm
  perf8 pat = ccv pat # ccn 43 # rytm
  perf11 pat = ccv pat # ccn 46 # rytm
  perf12 pat = ccv pat # ccn 47 # rytm
  samplestart pat = ccv pat # ccn 28 # rytm
  sampleend pat = ccv pat # ccn 29 # rytm
  scene pat = ccv pat # ccn 92 # rytm
  lfodepth pat = ccv pat # ccn 109 # rytm
  perf3flip = dg5 $ pan "1*16" # perf3 (choose [0,127])
  randGain min p = (|* gain (range min 1 $ shrand 1011)) $ p
  filter1 = ccn 1 # harmor
  filter2 = ccn 2 # harmor
  uniDetune = ccn 3 # harmor
  phwidth = ccn 4 # harmor
  envAttack = ccn 5 # harmor
  filter1width = ccn 6 # harmor
  filter2width = ccn 7 # harmor
  filter1env = ccn 8 # harmor
  filter2env = ccn 9 # harmor
  timbre = ccn 10 # harmor
  envDecay = ccn 11 # harmor
  prism = ccn 12 # harmor
  xfade = ccn 13 # harmor
  phoff = ccn 14 # harmor
  phspeed = ccn 15 # harmor
  amprel = ccn 16 # harmor
  harm = ccn 17 # harmor
  porta = ccn 18 # harmor
  unidetune = uniDetune
  envattack = envAttack 
  envatk = envAttack
  envdecay = envDecay
  xfadep pat = ccv pat # xfade
  ccrand min max x = (range min max $ shrand x)
  discRange a b = (discretise 1 $ range a b $ shrand 10003)
  discrange = discRange
  triRange a b c = (range a b $ slow c tri)
  trirange = triRange
  cpsDisc a b = (|* cps (discRange a b))
  cpsRange a b c = (|* cps (triRange a b c))
  cpsTri = cpsRange
  mapp mapping p = ( unwrap $ fmap (mapping!!) $ p) 
  mapp' mapping p = ( fmap (mapping!!) $ p) 
  rytmmap mapping pattern = midichan (mapp mapping $ pattern) # rytm 
  rytmmap' mapping pattern = midichan (mapp' mapping $ pattern) # rytm 
  xfademap mapping pattern = xfadep (mapp mapping $ pattern)
  notemap mapping pattern = note (mapp mapping $ pattern)
  notemap' mapping pattern = note (mapp' mapping $ pattern)
  ampmap mapping pattern = amp (mapp mapping $ pattern) 
  ampmap' mapping pattern = amp (mapp' mapping $ pattern)  
  replicator text1 = [putStr (text1) | x <- replicate 500 text1]
  flood text2 = sequence_(replicator text2)
  replicator' n text1 = [putStr (text1) | x <- replicate n text1]
  flood' n text2 = sequence_(replicator' n text2)
  say = flood

d1 $ fast 4 $ harm # ccv (range 0 127 $ slow 33 rand) # harmor

hush