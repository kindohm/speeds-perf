hush 

do
  let pat = (foldEvery [6,8] rev $ "{1@3 1@2 1 1@2 1@3 1@3 1@3 1@7 1@5}%16") :: Pattern Bool
      rfreq = segment 0.25
  d1  
    $ limit
    $ cpsDisc minTempo maxTempo
    $ useIter (iter 8)
    $ stack [
      reduce 
      $ clapIf (foldEvery [3,4] (within (0.5,1) (const $ stack [ s "~ rytm" # midichan 3 # note "c3"]) ))
      $ whenmod 20 17 (iter 8)
      $ foldEvery [4,5,7] (linger "1s")
      $ stack [
        kickOn $ struct pat $ s "rytm" # midichan 2 # note "c3"
        , hatOn $ ("1e" ~>) $ struct pat $ s "rytm" # midichan 10 # note "c3"
        , perc1On $ ("3s" ~>) $ struct pat $ s "rytm" # midichan 6 # note "c3"
        , perc2On $ ("4s" ~>) $ struct pat $ s "rytm" # midichan 7 # note "c3"
        , extraOn $ ("1s" <~) $ struct pat $ s "rytm" # midichan 0 # note "c3"
        , extra2On $ ("5s" ~>) $ struct pat $ s "rytm" # midichan "{8 9}%19" # note "c3"
      ] 
      , padOn $ slow 6 $ s "rytm" # midichan 4 # note "<c3>"
      , padOn $ samplestart (segment 1 $ range 0 24 $ shrand 82934) # s "rytm" # midichan 4
      , pad2On $ slow 7 $ s "rytm" # midichan 5 # note "<c3>"
      , scene (segment (1/2) $ range 0 sceneRange $ shrand 9991)
    ] # cps (160/120/2)
  d3
    $ harmorOn
    $ limit
    $ useIter (iter 8)
    $ reduce
    $ whenmod 20 17 (iter 8)
    $ foldEvery [4,5,7] (linger "1s")
    $ stack [
        struct pat $ note "c4" # speed007chan      
        , ccv (rfreq $ ccrand 10 100 134443) # filter1
        , ccv (rfreq $ ccrand 10 100 2333) # filter2
        , ccv (rfreq $ ccrand 0 127 3343) # unidetune
        , ccv (rfreq $ ccrand 0 64 4533) # phwidth
        , ccv (rfreq $ ccrand 40 80 38282) # phspeed
        , ccv (rfreq $ ccrand 5 127 5633) # envattack
        , ccv (rfreq $ ccrand 0 127 77283) # envdecay
        , ccv (rfreq $ ccrand 100 127 6833 ) # filter1width
        , ccv (rfreq $ ccrand 127 127 7033 ) # filter1env
        , ccv (rfreq $ ccrand 100 127 80033 ) # filter2width
        , ccv (rfreq $ ccrand 127 127 9933 ) # filter2env
        , ccv (rfreq $ ccrand 0 127 10833) # timbre
        , ccv (rfreq $ ccrand 64 64 11733) # amprel
        , ccv (rfreq $ ccrand 0 127 777000) # harm
    ] # s "harmor" # speed007chan

hush